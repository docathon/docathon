<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Docathon</title><link href="https://bids.github.io/docathon/" rel="alternate"></link><link href="https://bids.github.io/docathon/feeds/all.atom.xml" rel="self"></link><id>https://bids.github.io/docathon/</id><updated>2017-02-27T08:00:00-08:00</updated><entry><title>Don't forget to register!</title><link href="https://bids.github.io/docathon/registration.html" rel="alternate"></link><published>2017-02-27T08:00:00-08:00</published><updated>2017-02-27T08:00:00-08:00</updated><author><name>Nelle Varoquaux</name></author><id>tag:bids.github.io,2017-02-27:docathon/registration.html</id><summary type="html">&lt;p&gt;As the Docathon draws near (t-minus 7 days!), don't forget to register if you'd like to
come physically to one of the host locations! During the week there will be docathon groups working remotely at these locations:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BIDS, UC Berkeley, CA: &lt;a class="reference external" href="https://www.eventbrite.com/e/bids-docathon-kickoff-tickets-32302896834?aff=mcivte"&gt;register here&lt;/a&gt; | &lt;a class="reference external" href="pages/hosts/bids.html"&gt;Agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;eScience Institute, UW Seattle, WA : &lt;a class="reference external" href="https://goo.gl/forms/GMyMPJZ9eLT6eQuF2"&gt;register here&lt;/a&gt; | &lt;a class="reference external" href="pages/hosts/uwescience.html"&gt;Agenda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Digital Fellows (GCDI), The Graduate Center, NY : &lt;a class="reference external" href="https://www.eventbrite.com/e/doc-a-thon-tickets-32309998074"&gt;register here&lt;/a&gt; | &lt;a class="reference external" href="pages/hosts/gc.html"&gt;Agenda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docathon Kickoff&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition, on the first day we'll have a kickoff event at BIDS with some tutorials to help you build great documentation (&lt;a class="reference external" href="https://www.eventbrite.com/e/bids-docathon-kickoff-tickets-32302896834?aff=mcivte"&gt;signup here&lt;/a&gt;). We'll be streaming this live on the internet as well, so check back soon for a link.&lt;/p&gt;
</summary><category term="communication"></category><category term="coding"></category></entry><entry><title>How to contribute to documentation as a new user</title><link href="https://bids.github.io/docathon/contributing-documentation.html" rel="alternate"></link><published>2017-02-26T00:00:00-08:00</published><updated>2017-02-26T00:00:00-08:00</updated><author><name>Chris Holdgraf</name></author><id>tag:bids.github.io,2017-02-26:docathon/contributing-documentation.html</id><summary type="html">&lt;p&gt;Contributing to a project is often a daunting challenge. Each project has an
idiosyncratic way of organizing folders, accepting contributions, writing
examples, etc. Fortunately, documentation is a great way to get started. You
can usually make noticeable improvements to a package without knowing the full
details of the project’s API, and there are always improvements to be made in
documentation.&lt;/p&gt;
&lt;p&gt;However, it can be hard to figure out how to contribute to a project’s
documentation. As a part of the Docathon, there are several projects in need
of some documentation help. Here are some ways that you can help out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Review tutorials, examples, and written documentation.&lt;/strong&gt; Ideally keeping a
critical eye open for opportunities to improve the materials. This is an
excellent opportunity to learn a bit more about your favorite library and
propose improvements, fix typos, write a new paragraph, or improve one!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Look for issues that are labeled as documentation.&lt;/strong&gt; Many projects have
a list of issues related to documentation. Check out if there are any
issues labeled Documentation and new-contributor-friendly, e.g.:
&lt;a class="reference external" href="https://github.com/matplotlib/matplotlib/issues?q=is%3Aopen+label%3ADocumentation+label%3Anew-contributor-friendly"&gt;https://github.com/matplotlib/matplotlib/issues?q=is%3Aopen+label%3ADocumentation+label%3Anew-contributor-friendly&lt;/a&gt;.
If you can’t find any, you can always open an issue to offer your services
as a documenter!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve API/function documentation.&lt;/strong&gt; API documentation should clearly
explain the usage and meaning of &lt;em&gt;all&lt;/em&gt; inputs and outputs for functions,
objects, etc. This is extremely important for ensuring that the package is
easy to use. However, many packages fall short of this goal. Ensuring that
the documentation fits a common format (such as numpydoc for Python
projects) makes this job a lot easier. If the documentation isn’t already
in a common format then submit an issue suggesting converting the
documentation, or make this format switch yourself for a few functions in
a pull-request. If there is already a clear formatting preference in the
package, then perhaps you can improve under-documented functions or make
existing documentation clearer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contribute new examples.&lt;/strong&gt; Look through the examples provided in a
project’s documentation and see if there are any glaring omissions. Is
there some function that you use that isn’t covered in the examples? If
so, you could create a short script that shows off the functionality. If
you see two examples showcasing the same feature, try merging them!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve the language of examples.&lt;/strong&gt; Many examples / tutorials /
vignettes are thrown together relatively quickly and are often written in
an unclear and overly complex way. Check the comments and narrative
sections of the documents and think about how they could be improved. If
you see ways to improve the language, open an issue or submit a pull
request with your suggested changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If there are contribution guidelines&lt;/strong&gt;, adhere to them as much as
possible. This will reduce the amount of time needed to get your
contribution merged into the main codebase. Either way, try to style any
new contributions so that they’re similar to what is already there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We hope this helps you get started!&lt;/p&gt;
</summary><category term="communication"></category><category term="coding"></category></entry><entry><title>Encouraging user help for the Docathon (and beyond)</title><link href="https://bids.github.io/docathon/encouraging-user-docathon.html" rel="alternate"></link><published>2017-02-24T00:00:00-08:00</published><updated>2017-02-24T00:00:00-08:00</updated><author><name>Chris Holdgraf</name></author><id>tag:bids.github.io,2017-02-24:docathon/encouraging-user-docathon.html</id><summary type="html">&lt;p&gt;Documentation is a great way to get new users and contributors involved in
your project. It requires less knowledge of the intricacies of your codebase,
and can be both fun and easily appreciated by others.&lt;/p&gt;
&lt;p&gt;However, it’s not always clear to people how to contribute documentation. At
the Docathon there will be many attendees who have experience in coding, but
aren’t sure where to begin. This is a great opportunity to get some work done
and to grow your community.&lt;/p&gt;
&lt;p&gt;A commonly-forgotten part of project documentation is information about how
users can become developers. Each project has its idiosyncrasies and preferred
contribution workflow, and this isn’t always obvious to people. We recommend
the following steps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Think about your contribution workflow.&lt;/strong&gt; Do you have one? If not, then
spend some time thinking about how you’d like contributions to occur. If
anything else, it is helpful to explicitly state that you welcome
contributions in the form of pull requests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make it clear how your documentation is organized.&lt;/strong&gt; It’s good to have
documentation split up by the scope of its content. E.g., don’t intermingle
high-level tutorials with examples showing off a specific piece of the API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make it obvious what kinds of documentation goes where.&lt;/strong&gt; It will help
new contributors, and make it easier for new users to use your project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a “documentation” label, as well as a “new-contributor-friendly”
label&lt;/strong&gt; for your repository. Come up with some ways in which you’d like
your documentation to improve (e.g., &lt;tt class="docutils literal"&gt;#32: write an example for the
statistics module&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;make docstrings numpydoc compatible&lt;/tt&gt;) and tag it
with these labels. Along these lines, make your tickets as descriptive,
clear, and actionable as you can. “Add references to the &lt;tt class="docutils literal"&gt;linear_model&lt;/tt&gt;
function” is better than “Improve documentation for the &lt;tt class="docutils literal"&gt;linear_model&lt;/tt&gt;
function”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure that your project has at least one or two examples&lt;/strong&gt; that can
be highlighted as “good” forms of documentation. Many users will riff off
of what is already there, so if you can say “you should make your example
similar in style and scope to XXX”, it will help them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write a short “how to contribute” guide.&lt;/strong&gt; You might link to a guide on
opening pull-requests in github, then explain if you have any information
you’d like to see in the pull request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finally, don’t be too nitpicky about the PRs that new users make&lt;/strong&gt;, and
make sure to be friendly to new contributors! Documentation (usually)
won’t break anything, so don’t let good become an enemy of perfect! Is the
pull request an improvement? Just press the green button.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember - documentation is the first point of contact that most people have
with your package, so it’s worth putting in time to make it as clear,
complete, and maintainable as possible!&lt;/p&gt;
</summary><category term="communication"></category><category term="coding"></category></entry><entry><title>Why host a docathon?</title><link href="https://bids.github.io/docathon/why-host-a-docathon.html" rel="alternate"></link><published>2016-11-10T18:40:00-08:00</published><updated>2016-11-10T18:40:00-08:00</updated><author><name>Chris Holdgraf</name></author><id>tag:bids.github.io,2016-11-10:docathon/why-host-a-docathon.html</id><summary type="html">&lt;p&gt;Learning how to code, how to analyze data, how to do your work openly, and how to collaborate with others requires an incredible amount of self determination. While classes and our colleagues can teach us quite a lot about best practices in programming and the potential that exists in our respective computer languages, we must often rely on ourselves to learn about the tools at our disposal.&lt;/p&gt;
&lt;p&gt;For this purpose, the first point-of-contact many of us have with a package is its documentation. This can serve as simple &amp;quot;how-to&amp;quot; guide for how a package works and the API that is reveals to the user. It can also serve as a &amp;quot;best-practices&amp;quot; exemplar for how others &amp;quot;should&amp;quot; use a package. Sometimes it can even be an introduction to an entire field.&lt;/p&gt;
&lt;p&gt;Documentation is important because it's one of the first connections between the human world and the machine world. It helps us effectively translate our concepts and ideas into the languages that we use to control machines. Or, it can be a confusing mess, and hurt more than it helps.&lt;/p&gt;
&lt;p&gt;We believe that we can do better with documentation. While there are a few shining jewels of well-documented projects, the vast majority deserve to be improved. However, improving documentation is very different from writing better code. It requires the developer to intuitively describe their package and the ways that one might use it, a difficult feat for someone who is mired in the details of their package.&lt;/p&gt;
&lt;p&gt;This is where the docathon comes in - we hope to be a source of community and inspiration for writing better, human-centric documentation. We exist both as a place learn how to connect our computer code with our users, as well as a place to push one another to improve documentation across the open-source ecosystem.&lt;/p&gt;
&lt;p&gt;The first docathon will be held in early 2017, as a week long hacking session focused around improving our docs and creating tools to make documenation more effective. It will be focused at UC Berkeley, but we invite individuals from all over the world to join in for this week of intensive improvements to documentation. Whether it be offering a package that could use some help from the community, or simply taking a few hours to work on your own package's tutorials and docstrings, we welcome any and all contributions.&lt;/p&gt;
&lt;p&gt;Stay tuned in the coming weeks for more information about the first docathon, and how you can help out. We look forward to documenting with you all soon!&lt;/p&gt;
</summary><category term="communication"></category><category term="coding"></category></entry></feed>